diff --git a/NuGet.config b/NuGet.config
index d27ff9ced1..4826ff9188 100644
--- a/NuGet.config
+++ b/NuGet.config
@@ -1,4 +1,4 @@
-<?xml version="1.0" encoding="utf-8"?>
+<?xml version="1.0" encoding="utf-8"?>
 <configuration>
   <packageSources>
     <clear />
@@ -16,6 +16,8 @@
     <add key="dotnet31-transport" value="https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet3.1-transport/nuget/v3/index.json" />
     <!-- Used for the Rich Navigation indexing task -->
     <add key="richnav" value="https://pkgs.dev.azure.com/azure-public/vside/_packaging/vs-buildservices/nuget/v3/index.json" />
+    <add key="local" value="../runtime/artifacts/packages/Release/Shipping/" />
+    <add key="local2" value="../nuget" />
   </packageSources>
   <disabledPackageSources>
     <clear />
diff --git a/global.json b/global.json
index 9e1fe2c5c3..7e006b42a4 100644
--- a/global.json
+++ b/global.json
@@ -1,9 +1,9 @@
 {
   "sdk": {
-    "version": "7.0.100-alpha.1.22068.3"
+    "version": "7.0.100-preview.1.22110.4"
   },
   "tools": {
-    "dotnet": "7.0.100-alpha.1.22068.3",
+    "dotnet": "7.0.100-preview.1.22110.4",
     "runtimes": {
       "dotnet": [
         "2.1.30",
diff --git a/src/Components/Components/src/Sections/SectionRegistry.cs b/src/Components/Components/src/Sections/SectionRegistry.cs
index f08b1d1513..7e30f0b3d9 100644
--- a/src/Components/Components/src/Sections/SectionRegistry.cs
+++ b/src/Components/Components/src/Sections/SectionRegistry.cs
@@ -88,7 +88,7 @@ internal sealed class SectionRegistry
         }
     }
 
-    private RenderFragment? GetCurrentProviderContentOrDefault(List<ISectionContentProvider> providers)
+    private static RenderFragment? GetCurrentProviderContentOrDefault(List<ISectionContentProvider> providers)
         => providers.Count != 0
             ? providers[^1].Content
             : null;
diff --git a/src/Http/Routing/src/RouteOptions.cs b/src/Http/Routing/src/RouteOptions.cs
index 2b478f26de..41aed20491 100644
--- a/src/Http/Routing/src/RouteOptions.cs
+++ b/src/Http/Routing/src/RouteOptions.cs
@@ -128,7 +128,8 @@ public class RouteOptions
     /// </summary>
     /// <typeparam name="T">The parameter policy type.</typeparam>
     /// <param name="token">The route token used to apply the parameter policy.</param>
-    public void SetParameterPolicy<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]T>(string token) where T : IParameterPolicy
+    public void SetParameterPolicy<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] T>(string token)
+        where T : IParameterPolicy
     {
         ConstraintMap[token] = typeof(T);
     }
@@ -149,7 +150,8 @@ public class RouteOptions
         ConstraintMap[token] = type;
     }
 
-    private static void AddConstraint<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]TConstraint>(Dictionary<string, Type> constraintMap, string text) where TConstraint : IRouteConstraint
+    private static void AddConstraint<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TConstraint>(Dictionary<string, Type> constraintMap, string text)
+        where TConstraint : IRouteConstraint
     {
         constraintMap[text] = typeof(TConstraint);
     }
diff --git a/src/Mvc/Mvc.ApiExplorer/test/EndpointMetadataApiDescriptionProviderTest.cs b/src/Mvc/Mvc.ApiExplorer/test/EndpointMetadataApiDescriptionProviderTest.cs
index aef0b7ba2e..94e30e6c75 100644
--- a/src/Mvc/Mvc.ApiExplorer/test/EndpointMetadataApiDescriptionProviderTest.cs
+++ b/src/Mvc/Mvc.ApiExplorer/test/EndpointMetadataApiDescriptionProviderTest.cs
@@ -452,7 +452,7 @@ public class EndpointMetadataApiDescriptionProviderTest
     [Fact]
     public void AddsMetadataFromRouteEndpoint()
     {
-        var apiDescription = GetApiDescription([ApiExplorerSettings(IgnoreApi = true)]() => { });
+        var apiDescription = GetApiDescription([ApiExplorerSettings(IgnoreApi = true)] () => { });
 
         Assert.NotEmpty(apiDescription.ActionDescriptor.EndpointMetadata);
 
@@ -739,7 +739,7 @@ public class EndpointMetadataApiDescriptionProviderTest
     {
         // Arrange
         var builder = CreateBuilder();
-        builder.MapGet("/api/todos", [ProducesResponseType(typeof(List<string>), StatusCodes.Status200OK)]() => "")
+        builder.MapGet("/api/todos", [ProducesResponseType(typeof(List<string>), StatusCodes.Status200OK)] () => "")
             .Produces<InferredJsonClass>(StatusCodes.Status200OK);
         var context = new ApiDescriptionProviderContext(Array.Empty<ActionDescriptor>());
 
diff --git a/src/Security/Authentication/Core/src/AuthenticationBuilder.cs b/src/Security/Authentication/Core/src/AuthenticationBuilder.cs
index 12b878f89a..4d065ee9f4 100644
--- a/src/Security/Authentication/Core/src/AuthenticationBuilder.cs
+++ b/src/Security/Authentication/Core/src/AuthenticationBuilder.cs
@@ -25,7 +25,7 @@ public class AuthenticationBuilder
     /// </summary>
     public virtual IServiceCollection Services { get; }
 
-    private AuthenticationBuilder AddSchemeHelper<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]THandler>(string authenticationScheme, string? displayName, Action<TOptions>? configureOptions)
+    private AuthenticationBuilder AddSchemeHelper<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string authenticationScheme, string? displayName, Action<TOptions>? configureOptions)
         where TOptions : AuthenticationSchemeOptions, new()
         where THandler : class, IAuthenticationHandler
     {
@@ -59,7 +59,7 @@ public class AuthenticationBuilder
     /// <param name="displayName">The display name of this scheme.</param>
     /// <param name="configureOptions">Used to configure the scheme options.</param>
     /// <returns>The builder.</returns>
-    public virtual AuthenticationBuilder AddScheme<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]THandler>(string authenticationScheme, string? displayName, Action<TOptions>? configureOptions)
+    public virtual AuthenticationBuilder AddScheme<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string authenticationScheme, string? displayName, Action<TOptions>? configureOptions)
         where TOptions : AuthenticationSchemeOptions, new()
         where THandler : AuthenticationHandler<TOptions>
         => AddSchemeHelper<TOptions, THandler>(authenticationScheme, displayName, configureOptions);
@@ -72,7 +72,7 @@ public class AuthenticationBuilder
     /// <param name="authenticationScheme">The name of this scheme.</param>
     /// <param name="configureOptions">Used to configure the scheme options.</param>
     /// <returns>The builder.</returns>
-    public virtual AuthenticationBuilder AddScheme<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]THandler>(string authenticationScheme, Action<TOptions>? configureOptions)
+    public virtual AuthenticationBuilder AddScheme<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string authenticationScheme, Action<TOptions>? configureOptions)
         where TOptions : AuthenticationSchemeOptions, new()
         where THandler : AuthenticationHandler<TOptions>
         => AddScheme<TOptions, THandler>(authenticationScheme, displayName: null, configureOptions: configureOptions);
@@ -87,7 +87,7 @@ public class AuthenticationBuilder
     /// <param name="displayName">The display name of this scheme.</param>
     /// <param name="configureOptions">Used to configure the scheme options.</param>
     /// <returns>The builder.</returns>
-    public virtual AuthenticationBuilder AddRemoteScheme<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]THandler>(string authenticationScheme, string? displayName, Action<TOptions>? configureOptions)
+    public virtual AuthenticationBuilder AddRemoteScheme<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(string authenticationScheme, string? displayName, Action<TOptions>? configureOptions)
         where TOptions : RemoteAuthenticationOptions, new()
         where THandler : RemoteAuthenticationHandler<TOptions>
     {
diff --git a/src/Security/Authentication/OAuth/src/OAuthExtensions.cs b/src/Security/Authentication/OAuth/src/OAuthExtensions.cs
index 73bb6c0f77..96cee54321 100644
--- a/src/Security/Authentication/OAuth/src/OAuthExtensions.cs
+++ b/src/Security/Authentication/OAuth/src/OAuthExtensions.cs
@@ -42,7 +42,7 @@ public static class OAuthExtensions
     /// <param name="authenticationScheme">The authentication scheme.</param>
     /// <param name="configureOptions">A delegate to configure the handler specific options.</param>
     /// <returns>A reference to <paramref name="builder"/> after the operation has completed.</returns>
-    public static AuthenticationBuilder AddOAuth<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]THandler>(this AuthenticationBuilder builder, string authenticationScheme, Action<TOptions> configureOptions)
+    public static AuthenticationBuilder AddOAuth<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(this AuthenticationBuilder builder, string authenticationScheme, Action<TOptions> configureOptions)
         where TOptions : OAuthOptions, new()
         where THandler : OAuthHandler<TOptions>
         => builder.AddOAuth<TOptions, THandler>(authenticationScheme, OAuthDefaults.DisplayName, configureOptions);
@@ -55,7 +55,7 @@ public static class OAuthExtensions
     /// <param name="displayName">A display name for the authentication handler.</param>
     /// <param name="configureOptions">A delegate to configure the handler specific options.</param>
     /// <returns>A reference to <paramref name="builder"/> after the operation has completed.</returns>
-    public static AuthenticationBuilder AddOAuth<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]THandler>(this AuthenticationBuilder builder, string authenticationScheme, string displayName, Action<TOptions> configureOptions)
+    public static AuthenticationBuilder AddOAuth<TOptions, [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] THandler>(this AuthenticationBuilder builder, string authenticationScheme, string displayName, Action<TOptions> configureOptions)
         where TOptions : OAuthOptions, new()
         where THandler : OAuthHandler<TOptions>
     {
diff --git a/src/SignalR/server/Core/src/HubOptionsExtensions.cs b/src/SignalR/server/Core/src/HubOptionsExtensions.cs
index 8f2aa6db88..4a473d863d 100644
--- a/src/SignalR/server/Core/src/HubOptionsExtensions.cs
+++ b/src/SignalR/server/Core/src/HubOptionsExtensions.cs
@@ -34,7 +34,7 @@ public static class HubOptionsExtensions
     /// </summary>
     /// <typeparam name="TFilter">The <see cref="IHubFilter"/> type that will be added to the options.</typeparam>
     /// <param name="options">The options to add a filter to.</param>
-    public static void AddFilter<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]TFilter>(this HubOptions options) where TFilter : IHubFilter
+    public static void AddFilter<[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)] TFilter>(this HubOptions options) where TFilter : IHubFilter
     {
         _ = options ?? throw new ArgumentNullException(nameof(options));
 
diff --git a/src/SignalR/server/Core/src/SignalRConnectionBuilderExtensions.cs b/src/SignalR/server/Core/src/SignalRConnectionBuilderExtensions.cs
index 1fdf2a4f40..9f3ef3105d 100644
--- a/src/SignalR/server/Core/src/SignalRConnectionBuilderExtensions.cs
+++ b/src/SignalR/server/Core/src/SignalRConnectionBuilderExtensions.cs
@@ -20,7 +20,7 @@ public static class SignalRConnectionBuilderExtensions
     /// <typeparam name="THub">The <see cref="Hub"/> type to host on the connection.</typeparam>
     /// <param name="connectionBuilder">The connection to configure.</param>
     /// <returns>The same instance of the <see cref="IConnectionBuilder"/> for chaining.</returns>
-    public static IConnectionBuilder UseHub<[DynamicallyAccessedMembers(HubAccessibility)]THub>(this IConnectionBuilder connectionBuilder) where THub : Hub
+    public static IConnectionBuilder UseHub<[DynamicallyAccessedMembers(HubAccessibility)] THub>(this IConnectionBuilder connectionBuilder) where THub : Hub
     {
         var marker = connectionBuilder.ApplicationServices.GetService(typeof(SignalRCoreMarkerService));
         if (marker == null)
diff --git a/src/SignalR/server/SignalR/src/HubEndpointRouteBuilderExtensions.cs b/src/SignalR/server/SignalR/src/HubEndpointRouteBuilderExtensions.cs
index 51d5c1e40b..b7f3aee2c1 100644
--- a/src/SignalR/server/SignalR/src/HubEndpointRouteBuilderExtensions.cs
+++ b/src/SignalR/server/SignalR/src/HubEndpointRouteBuilderExtensions.cs
@@ -23,7 +23,7 @@ public static class HubEndpointRouteBuilderExtensions
     /// <param name="endpoints">The <see cref="IEndpointRouteBuilder"/> to add the route to.</param>
     /// <param name="pattern">The route pattern.</param>
     /// <returns>An <see cref="HubEndpointConventionBuilder"/> for endpoints associated with the connections.</returns>
-    public static HubEndpointConventionBuilder MapHub<[DynamicallyAccessedMembers(HubAccessibility)]THub>(this IEndpointRouteBuilder endpoints, string pattern) where THub : Hub
+    public static HubEndpointConventionBuilder MapHub<[DynamicallyAccessedMembers(HubAccessibility)] THub>(this IEndpointRouteBuilder endpoints, string pattern) where THub : Hub
     {
         return endpoints.MapHub<THub>(pattern, configureOptions: null);
     }
@@ -36,7 +36,7 @@ public static class HubEndpointRouteBuilderExtensions
     /// <param name="pattern">The route pattern.</param>
     /// <param name="configureOptions">A callback to configure dispatcher options.</param>
     /// <returns>An <see cref="HubEndpointConventionBuilder"/> for endpoints associated with the connections.</returns>
-    public static HubEndpointConventionBuilder MapHub<[DynamicallyAccessedMembers(HubAccessibility)]THub>(this IEndpointRouteBuilder endpoints, string pattern, Action<HttpConnectionDispatcherOptions>? configureOptions) where THub : Hub
+    public static HubEndpointConventionBuilder MapHub<[DynamicallyAccessedMembers(HubAccessibility)] THub>(this IEndpointRouteBuilder endpoints, string pattern, Action<HttpConnectionDispatcherOptions>? configureOptions) where THub : Hub
     {
         var marker = endpoints.ServiceProvider.GetService<SignalRMarkerService>();
 
diff --git a/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.csproj b/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.csproj
index 38a3f2a347..4695630fc7 100644
--- a/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.csproj
+++ b/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.csproj
@@ -3,7 +3,7 @@
 
   <PropertyGroup>
     <!-- Included primarily to ensure dotnet-getdocument and GetDocument.Insider can be referenced. -->
-    <TargetFrameworks>netcoreapp2.1;$(DefaultNetFxTargetFramework)</TargetFrameworks>
+    <TargetFrameworks>net6.0;$(DefaultNetFxTargetFramework)</TargetFrameworks>
 
     <Description>MSBuild tasks and targets for build-time Swagger and OpenApi document generation</Description>
     <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
diff --git a/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.nuspec b/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.nuspec
index f9c41332cb..59c9ac9a9b 100644
--- a/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.nuspec
+++ b/src/Tools/Extensions.ApiDescription.Server/src/Microsoft.Extensions.ApiDescription.Server.nuspec
@@ -8,9 +8,9 @@
     $CommonFileElements$
     <file src="build\*" target="build" />
     <file src="buildMultiTargeting\*" target="buildMultiTargeting" />
-    <file src="$artifactsBinDir$\dotnet-getdocument\$configuration$\netcoreapp2.1\publish\*.*" target="tools" />
+    <file src="$artifactsBinDir$\dotnet-getdocument\$configuration$\net6.0\*.*" target="tools" />
     <file src="$artifactsBinDir$\GetDocument.Insider\$configuration$\net462\*.*" target="tools\net462" />
     <file src="$artifactsBinDir$\GetDocument.Insider\x86\$configuration$\net462\*.*" target="tools\net462-x86" />
-    <file src="$artifactsBinDir$\GetDocument.Insider\$configuration$\netcoreapp2.1\publish\*.*" target="tools\netcoreapp2.1" />
+    <file src="$artifactsBinDir$\GetDocument.Insider\$configuration$\net6.0\*.*" target="tools\netcoreapp2.1" />
   </files>
 </package>
diff --git a/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommand.cs b/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommand.cs
index e834b3665f..d0eec1f027 100644
--- a/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommand.cs
+++ b/src/Tools/GetDocumentInsider/src/Commands/GetDocumentCommand.cs
@@ -115,7 +115,6 @@ internal class GetDocumentCommand : ProjectCommandBase
             return Assembly.LoadFile(assemblyPath);
         };
 #else
-#error Target frameworks need to be updated.
 #endif
 
         // Now safe to reference the application's code.
diff --git a/src/Tools/GetDocumentInsider/src/GetDocument.Insider.csproj b/src/Tools/GetDocumentInsider/src/GetDocument.Insider.csproj
index 323336d985..3a45c56589 100644
--- a/src/Tools/GetDocumentInsider/src/GetDocument.Insider.csproj
+++ b/src/Tools/GetDocumentInsider/src/GetDocument.Insider.csproj
@@ -5,7 +5,7 @@
     <IsPackable>false</IsPackable>
     <OutputType>Exe</OutputType>
     <RootNamespace>Microsoft.Extensions.ApiDescription.Tool</RootNamespace>
-    <TargetFrameworks>netcoreapp2.1;$(DefaultNetFxTargetFramework)</TargetFrameworks>
+    <TargetFrameworks>net6.0;$(DefaultNetFxTargetFramework)</TargetFrameworks>
     <IsShippingPackage>false</IsShippingPackage>
   </PropertyGroup>
 
diff --git a/src/Tools/dotnet-getdocument/src/dotnet-getdocument.csproj b/src/Tools/dotnet-getdocument/src/dotnet-getdocument.csproj
index 7bcdcbcd7a..da2e202231 100644
--- a/src/Tools/dotnet-getdocument/src/dotnet-getdocument.csproj
+++ b/src/Tools/dotnet-getdocument/src/dotnet-getdocument.csproj
@@ -5,7 +5,7 @@
     <IsPackable>false</IsPackable>
     <OutputType>Exe</OutputType>
     <RootNamespace>Microsoft.Extensions.ApiDescription.Tool</RootNamespace>
-    <TargetFramework>netcoreapp2.1</TargetFramework>
+    <TargetFramework>net6.0</TargetFramework>
     <UseAppHost>false</UseAppHost>
     <IsShippingPackage>false</IsShippingPackage>
   </PropertyGroup>
